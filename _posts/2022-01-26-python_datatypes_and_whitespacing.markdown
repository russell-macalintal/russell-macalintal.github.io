---
layout: post
title:      "Python Datatypes and Whitespacing "
date:       2022-01-26 18:31:44 +0000
permalink:  python_datatypes_and_whitespacing
---


Learning a new language is always an adventure. When I first learned English in grade school in the Philippines, it came to me naturally since the structure was very similar to Tagalog (my native tongue) and both languages used nearly identical alphabets. Likewise, learning Spanish was also relatively easy. After all, like English, it is one of the Romance languages and the sprinkling of Spanish words in Tagalog had already made it familiar (TLDR: the Philippines was a Spanish colony for over 350 years so mixing of the languages was inevitable). Transitioning between these languages is what I would consider a "lateral move" and generally only involves learning new words as well as some minor rules and exceptions specific to that language. Of course, this does not apply to all languages. Mandarin and Russian are just some examples that come to mind that operate with completely different structures and syntax.  Granted, I am no linguist so I am probably oversimplifying and missing alot of the nuances. Regardless, there is no denying that similarities between languages definitely facilitate the learning process.

My coding background and knowledge so far has been in web development so I've learned languages such as Ruby and Javascript. Recently I have started learning and taking courses in Python and eventually plan to continue on to Java. Here are just some observations that I have made so far in my journey.

Python Datatypes: Similar to Ruby and Javascript, Python has built-in primitive data types such as text (Strings), numerals (Integers, Floats), and booleans, which function exactly like they do in other programming languages. Likewise, it also has collection data types that function simliarly to collections from other languages like Ruby and Javascript, however, they are called by different terms. Python `lists`, for example, act like Ruby `arrays` while Python `dictionaries` store key/value pairs just like Ruby `hashes`. Of course, other than being a minor annoyance due to the naming convention, there is really no discernible difference in their use and function. Just like in human languages, the meanings are the same but the terms are different. The fact that the concepts are similar, but just go by different names, still facilitates learning a "new" language after already mastering others. Granted, this is not meant to gloss over the fact that Python has other collection data types, such as tuples, ranges, and sets that definitely have their uses, but it does highlight the fact that coding languages, just like human languages, have many similarities that they share in order to function as needed.

Python Whitespacing: After being conditioned to always enclose code blocks within a beginning and ending syntax or keyword (ie. Javascript curly braces `{ }` and Ruby `do` and `end` or `def` and `end` keywords), it is a little uncomfortable to know that the same functionality is derived from a mere colon `:` and tabbed whitespaces. There is certainly advantages to this structure as it can help shorten the code, even if just by a single line per function definition or conditional or loop statement; it can clean up the code by removing crowded parenthesis, brackets, and curly brackets;  and it forces programmers to indent, which certainly further helps with legibility. However, it does take some getting used to and it can be something that can be a hindrance if it is not always kept in the back of your mind when switching languages. Being a new Python programmer, I probably have not come across situations where there is a legitimate reason for this choice in writing, so for now, I am chalking it up to just a matter of preference. 

All in all, I find learning Python to be quite simple and similar to other languages I already know, but I am sure I will find more similarities and differences that I may include in future blogs.
